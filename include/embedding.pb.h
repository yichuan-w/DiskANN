// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: embedding.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_embedding_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_embedding_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_embedding_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_embedding_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_embedding_2eproto;
namespace protoembedding {
class NodeEmbeddingRequest;
struct NodeEmbeddingRequestDefaultTypeInternal;
extern NodeEmbeddingRequestDefaultTypeInternal _NodeEmbeddingRequest_default_instance_;
class NodeEmbeddingResponse;
struct NodeEmbeddingResponseDefaultTypeInternal;
extern NodeEmbeddingResponseDefaultTypeInternal _NodeEmbeddingResponse_default_instance_;
}  // namespace protoembedding
PROTOBUF_NAMESPACE_OPEN
template<> ::protoembedding::NodeEmbeddingRequest* Arena::CreateMaybeMessage<::protoembedding::NodeEmbeddingRequest>(Arena*);
template<> ::protoembedding::NodeEmbeddingResponse* Arena::CreateMaybeMessage<::protoembedding::NodeEmbeddingResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protoembedding {

// ===================================================================

class NodeEmbeddingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoembedding.NodeEmbeddingRequest) */ {
 public:
  inline NodeEmbeddingRequest() : NodeEmbeddingRequest(nullptr) {}
  ~NodeEmbeddingRequest() override;
  explicit PROTOBUF_CONSTEXPR NodeEmbeddingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeEmbeddingRequest(const NodeEmbeddingRequest& from);
  NodeEmbeddingRequest(NodeEmbeddingRequest&& from) noexcept
    : NodeEmbeddingRequest() {
    *this = ::std::move(from);
  }

  inline NodeEmbeddingRequest& operator=(const NodeEmbeddingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeEmbeddingRequest& operator=(NodeEmbeddingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeEmbeddingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeEmbeddingRequest* internal_default_instance() {
    return reinterpret_cast<const NodeEmbeddingRequest*>(
               &_NodeEmbeddingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NodeEmbeddingRequest& a, NodeEmbeddingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeEmbeddingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeEmbeddingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeEmbeddingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeEmbeddingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeEmbeddingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeEmbeddingRequest& from) {
    NodeEmbeddingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeEmbeddingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoembedding.NodeEmbeddingRequest";
  }
  protected:
  explicit NodeEmbeddingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdsFieldNumber = 1,
  };
  // repeated uint32 node_ids = 1;
  int node_ids_size() const;
  private:
  int _internal_node_ids_size() const;
  public:
  void clear_node_ids();
  private:
  uint32_t _internal_node_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_node_ids() const;
  void _internal_add_node_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_node_ids();
  public:
  uint32_t node_ids(int index) const;
  void set_node_ids(int index, uint32_t value);
  void add_node_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      node_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_node_ids();

  // @@protoc_insertion_point(class_scope:protoembedding.NodeEmbeddingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > node_ids_;
    mutable std::atomic<int> _node_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedding_2eproto;
};
// -------------------------------------------------------------------

class NodeEmbeddingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoembedding.NodeEmbeddingResponse) */ {
 public:
  inline NodeEmbeddingResponse() : NodeEmbeddingResponse(nullptr) {}
  ~NodeEmbeddingResponse() override;
  explicit PROTOBUF_CONSTEXPR NodeEmbeddingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeEmbeddingResponse(const NodeEmbeddingResponse& from);
  NodeEmbeddingResponse(NodeEmbeddingResponse&& from) noexcept
    : NodeEmbeddingResponse() {
    *this = ::std::move(from);
  }

  inline NodeEmbeddingResponse& operator=(const NodeEmbeddingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeEmbeddingResponse& operator=(NodeEmbeddingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeEmbeddingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeEmbeddingResponse* internal_default_instance() {
    return reinterpret_cast<const NodeEmbeddingResponse*>(
               &_NodeEmbeddingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NodeEmbeddingResponse& a, NodeEmbeddingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeEmbeddingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeEmbeddingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeEmbeddingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeEmbeddingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeEmbeddingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeEmbeddingResponse& from) {
    NodeEmbeddingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeEmbeddingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoembedding.NodeEmbeddingResponse";
  }
  protected:
  explicit NodeEmbeddingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionsFieldNumber = 2,
    kMissingIdsFieldNumber = 3,
    kEmbeddingsDataFieldNumber = 1,
  };
  // repeated int32 dimensions = 2;
  int dimensions_size() const;
  private:
  int _internal_dimensions_size() const;
  public:
  void clear_dimensions();
  private:
  int32_t _internal_dimensions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_dimensions() const;
  void _internal_add_dimensions(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_dimensions();
  public:
  int32_t dimensions(int index) const;
  void set_dimensions(int index, int32_t value);
  void add_dimensions(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      dimensions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_dimensions();

  // repeated uint32 missing_ids = 3;
  int missing_ids_size() const;
  private:
  int _internal_missing_ids_size() const;
  public:
  void clear_missing_ids();
  private:
  uint32_t _internal_missing_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_missing_ids() const;
  void _internal_add_missing_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_missing_ids();
  public:
  uint32_t missing_ids(int index) const;
  void set_missing_ids(int index, uint32_t value);
  void add_missing_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      missing_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_missing_ids();

  // bytes embeddings_data = 1;
  void clear_embeddings_data();
  const std::string& embeddings_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_embeddings_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_embeddings_data();
  PROTOBUF_NODISCARD std::string* release_embeddings_data();
  void set_allocated_embeddings_data(std::string* embeddings_data);
  private:
  const std::string& _internal_embeddings_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_embeddings_data(const std::string& value);
  std::string* _internal_mutable_embeddings_data();
  public:

  // @@protoc_insertion_point(class_scope:protoembedding.NodeEmbeddingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > dimensions_;
    mutable std::atomic<int> _dimensions_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > missing_ids_;
    mutable std::atomic<int> _missing_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr embeddings_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_embedding_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeEmbeddingRequest

// repeated uint32 node_ids = 1;
inline int NodeEmbeddingRequest::_internal_node_ids_size() const {
  return _impl_.node_ids_.size();
}
inline int NodeEmbeddingRequest::node_ids_size() const {
  return _internal_node_ids_size();
}
inline void NodeEmbeddingRequest::clear_node_ids() {
  _impl_.node_ids_.Clear();
}
inline uint32_t NodeEmbeddingRequest::_internal_node_ids(int index) const {
  return _impl_.node_ids_.Get(index);
}
inline uint32_t NodeEmbeddingRequest::node_ids(int index) const {
  // @@protoc_insertion_point(field_get:protoembedding.NodeEmbeddingRequest.node_ids)
  return _internal_node_ids(index);
}
inline void NodeEmbeddingRequest::set_node_ids(int index, uint32_t value) {
  _impl_.node_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protoembedding.NodeEmbeddingRequest.node_ids)
}
inline void NodeEmbeddingRequest::_internal_add_node_ids(uint32_t value) {
  _impl_.node_ids_.Add(value);
}
inline void NodeEmbeddingRequest::add_node_ids(uint32_t value) {
  _internal_add_node_ids(value);
  // @@protoc_insertion_point(field_add:protoembedding.NodeEmbeddingRequest.node_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
NodeEmbeddingRequest::_internal_node_ids() const {
  return _impl_.node_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
NodeEmbeddingRequest::node_ids() const {
  // @@protoc_insertion_point(field_list:protoembedding.NodeEmbeddingRequest.node_ids)
  return _internal_node_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
NodeEmbeddingRequest::_internal_mutable_node_ids() {
  return &_impl_.node_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
NodeEmbeddingRequest::mutable_node_ids() {
  // @@protoc_insertion_point(field_mutable_list:protoembedding.NodeEmbeddingRequest.node_ids)
  return _internal_mutable_node_ids();
}

// -------------------------------------------------------------------

// NodeEmbeddingResponse

// bytes embeddings_data = 1;
inline void NodeEmbeddingResponse::clear_embeddings_data() {
  _impl_.embeddings_data_.ClearToEmpty();
}
inline const std::string& NodeEmbeddingResponse::embeddings_data() const {
  // @@protoc_insertion_point(field_get:protoembedding.NodeEmbeddingResponse.embeddings_data)
  return _internal_embeddings_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeEmbeddingResponse::set_embeddings_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.embeddings_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoembedding.NodeEmbeddingResponse.embeddings_data)
}
inline std::string* NodeEmbeddingResponse::mutable_embeddings_data() {
  std::string* _s = _internal_mutable_embeddings_data();
  // @@protoc_insertion_point(field_mutable:protoembedding.NodeEmbeddingResponse.embeddings_data)
  return _s;
}
inline const std::string& NodeEmbeddingResponse::_internal_embeddings_data() const {
  return _impl_.embeddings_data_.Get();
}
inline void NodeEmbeddingResponse::_internal_set_embeddings_data(const std::string& value) {
  
  _impl_.embeddings_data_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeEmbeddingResponse::_internal_mutable_embeddings_data() {
  
  return _impl_.embeddings_data_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeEmbeddingResponse::release_embeddings_data() {
  // @@protoc_insertion_point(field_release:protoembedding.NodeEmbeddingResponse.embeddings_data)
  return _impl_.embeddings_data_.Release();
}
inline void NodeEmbeddingResponse::set_allocated_embeddings_data(std::string* embeddings_data) {
  if (embeddings_data != nullptr) {
    
  } else {
    
  }
  _impl_.embeddings_data_.SetAllocated(embeddings_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.embeddings_data_.IsDefault()) {
    _impl_.embeddings_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protoembedding.NodeEmbeddingResponse.embeddings_data)
}

// repeated int32 dimensions = 2;
inline int NodeEmbeddingResponse::_internal_dimensions_size() const {
  return _impl_.dimensions_.size();
}
inline int NodeEmbeddingResponse::dimensions_size() const {
  return _internal_dimensions_size();
}
inline void NodeEmbeddingResponse::clear_dimensions() {
  _impl_.dimensions_.Clear();
}
inline int32_t NodeEmbeddingResponse::_internal_dimensions(int index) const {
  return _impl_.dimensions_.Get(index);
}
inline int32_t NodeEmbeddingResponse::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:protoembedding.NodeEmbeddingResponse.dimensions)
  return _internal_dimensions(index);
}
inline void NodeEmbeddingResponse::set_dimensions(int index, int32_t value) {
  _impl_.dimensions_.Set(index, value);
  // @@protoc_insertion_point(field_set:protoembedding.NodeEmbeddingResponse.dimensions)
}
inline void NodeEmbeddingResponse::_internal_add_dimensions(int32_t value) {
  _impl_.dimensions_.Add(value);
}
inline void NodeEmbeddingResponse::add_dimensions(int32_t value) {
  _internal_add_dimensions(value);
  // @@protoc_insertion_point(field_add:protoembedding.NodeEmbeddingResponse.dimensions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeEmbeddingResponse::_internal_dimensions() const {
  return _impl_.dimensions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
NodeEmbeddingResponse::dimensions() const {
  // @@protoc_insertion_point(field_list:protoembedding.NodeEmbeddingResponse.dimensions)
  return _internal_dimensions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeEmbeddingResponse::_internal_mutable_dimensions() {
  return &_impl_.dimensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
NodeEmbeddingResponse::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:protoembedding.NodeEmbeddingResponse.dimensions)
  return _internal_mutable_dimensions();
}

// repeated uint32 missing_ids = 3;
inline int NodeEmbeddingResponse::_internal_missing_ids_size() const {
  return _impl_.missing_ids_.size();
}
inline int NodeEmbeddingResponse::missing_ids_size() const {
  return _internal_missing_ids_size();
}
inline void NodeEmbeddingResponse::clear_missing_ids() {
  _impl_.missing_ids_.Clear();
}
inline uint32_t NodeEmbeddingResponse::_internal_missing_ids(int index) const {
  return _impl_.missing_ids_.Get(index);
}
inline uint32_t NodeEmbeddingResponse::missing_ids(int index) const {
  // @@protoc_insertion_point(field_get:protoembedding.NodeEmbeddingResponse.missing_ids)
  return _internal_missing_ids(index);
}
inline void NodeEmbeddingResponse::set_missing_ids(int index, uint32_t value) {
  _impl_.missing_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protoembedding.NodeEmbeddingResponse.missing_ids)
}
inline void NodeEmbeddingResponse::_internal_add_missing_ids(uint32_t value) {
  _impl_.missing_ids_.Add(value);
}
inline void NodeEmbeddingResponse::add_missing_ids(uint32_t value) {
  _internal_add_missing_ids(value);
  // @@protoc_insertion_point(field_add:protoembedding.NodeEmbeddingResponse.missing_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
NodeEmbeddingResponse::_internal_missing_ids() const {
  return _impl_.missing_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
NodeEmbeddingResponse::missing_ids() const {
  // @@protoc_insertion_point(field_list:protoembedding.NodeEmbeddingResponse.missing_ids)
  return _internal_missing_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
NodeEmbeddingResponse::_internal_mutable_missing_ids() {
  return &_impl_.missing_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
NodeEmbeddingResponse::mutable_missing_ids() {
  // @@protoc_insertion_point(field_mutable_list:protoembedding.NodeEmbeddingResponse.missing_ids)
  return _internal_mutable_missing_ids();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protoembedding

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_embedding_2eproto
