// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: embedding.proto

#include "embedding.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protoembedding {
PROTOBUF_CONSTEXPR NodeEmbeddingRequest::NodeEmbeddingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_ids_)*/{}
  , /*decltype(_impl_._node_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeEmbeddingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeEmbeddingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeEmbeddingRequestDefaultTypeInternal() {}
  union {
    NodeEmbeddingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeEmbeddingRequestDefaultTypeInternal _NodeEmbeddingRequest_default_instance_;
PROTOBUF_CONSTEXPR NodeEmbeddingResponse::NodeEmbeddingResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dimensions_)*/{}
  , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
  , /*decltype(_impl_.missing_ids_)*/{}
  , /*decltype(_impl_._missing_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.embeddings_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeEmbeddingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeEmbeddingResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeEmbeddingResponseDefaultTypeInternal() {}
  union {
    NodeEmbeddingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeEmbeddingResponseDefaultTypeInternal _NodeEmbeddingResponse_default_instance_;
}  // namespace protoembedding
static ::_pb::Metadata file_level_metadata_embedding_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_embedding_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_embedding_2eproto = nullptr;

const uint32_t TableStruct_embedding_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protoembedding::NodeEmbeddingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoembedding::NodeEmbeddingRequest, _impl_.node_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protoembedding::NodeEmbeddingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoembedding::NodeEmbeddingResponse, _impl_.embeddings_data_),
  PROTOBUF_FIELD_OFFSET(::protoembedding::NodeEmbeddingResponse, _impl_.dimensions_),
  PROTOBUF_FIELD_OFFSET(::protoembedding::NodeEmbeddingResponse, _impl_.missing_ids_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protoembedding::NodeEmbeddingRequest)},
  { 7, -1, -1, sizeof(::protoembedding::NodeEmbeddingResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protoembedding::_NodeEmbeddingRequest_default_instance_._instance,
  &::protoembedding::_NodeEmbeddingResponse_default_instance_._instance,
};

const char descriptor_table_protodef_embedding_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017embedding.proto\022\016protoembedding\"(\n\024Nod"
  "eEmbeddingRequest\022\020\n\010node_ids\030\001 \003(\r\"Y\n\025N"
  "odeEmbeddingResponse\022\027\n\017embeddings_data\030"
  "\001 \001(\014\022\022\n\ndimensions\030\002 \003(\005\022\023\n\013missing_ids"
  "\030\003 \003(\rb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_embedding_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_embedding_2eproto = {
    false, false, 174, descriptor_table_protodef_embedding_2eproto,
    "embedding.proto",
    &descriptor_table_embedding_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_embedding_2eproto::offsets,
    file_level_metadata_embedding_2eproto, file_level_enum_descriptors_embedding_2eproto,
    file_level_service_descriptors_embedding_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_embedding_2eproto_getter() {
  return &descriptor_table_embedding_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_embedding_2eproto(&descriptor_table_embedding_2eproto);
namespace protoembedding {

// ===================================================================

class NodeEmbeddingRequest::_Internal {
 public:
};

NodeEmbeddingRequest::NodeEmbeddingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protoembedding.NodeEmbeddingRequest)
}
NodeEmbeddingRequest::NodeEmbeddingRequest(const NodeEmbeddingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeEmbeddingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_ids_){from._impl_.node_ids_}
    , /*decltype(_impl_._node_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protoembedding.NodeEmbeddingRequest)
}

inline void NodeEmbeddingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_ids_){arena}
    , /*decltype(_impl_._node_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NodeEmbeddingRequest::~NodeEmbeddingRequest() {
  // @@protoc_insertion_point(destructor:protoembedding.NodeEmbeddingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeEmbeddingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_ids_.~RepeatedField();
}

void NodeEmbeddingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeEmbeddingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protoembedding.NodeEmbeddingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeEmbeddingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 node_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_node_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_node_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeEmbeddingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protoembedding.NodeEmbeddingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 node_ids = 1;
  {
    int byte_size = _impl_._node_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_node_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoembedding.NodeEmbeddingRequest)
  return target;
}

size_t NodeEmbeddingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoembedding.NodeEmbeddingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 node_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.node_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._node_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeEmbeddingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeEmbeddingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeEmbeddingRequest::GetClassData() const { return &_class_data_; }


void NodeEmbeddingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeEmbeddingRequest*>(&to_msg);
  auto& from = static_cast<const NodeEmbeddingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protoembedding.NodeEmbeddingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.node_ids_.MergeFrom(from._impl_.node_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeEmbeddingRequest::CopyFrom(const NodeEmbeddingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoembedding.NodeEmbeddingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeEmbeddingRequest::IsInitialized() const {
  return true;
}

void NodeEmbeddingRequest::InternalSwap(NodeEmbeddingRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.node_ids_.InternalSwap(&other->_impl_.node_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeEmbeddingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_embedding_2eproto_getter, &descriptor_table_embedding_2eproto_once,
      file_level_metadata_embedding_2eproto[0]);
}

// ===================================================================

class NodeEmbeddingResponse::_Internal {
 public:
};

NodeEmbeddingResponse::NodeEmbeddingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protoembedding.NodeEmbeddingResponse)
}
NodeEmbeddingResponse::NodeEmbeddingResponse(const NodeEmbeddingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeEmbeddingResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){from._impl_.dimensions_}
    , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.missing_ids_){from._impl_.missing_ids_}
    , /*decltype(_impl_._missing_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.embeddings_data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.embeddings_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.embeddings_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_embeddings_data().empty()) {
    _this->_impl_.embeddings_data_.Set(from._internal_embeddings_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protoembedding.NodeEmbeddingResponse)
}

inline void NodeEmbeddingResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){arena}
    , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.missing_ids_){arena}
    , /*decltype(_impl_._missing_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.embeddings_data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.embeddings_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.embeddings_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NodeEmbeddingResponse::~NodeEmbeddingResponse() {
  // @@protoc_insertion_point(destructor:protoembedding.NodeEmbeddingResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeEmbeddingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dimensions_.~RepeatedField();
  _impl_.missing_ids_.~RepeatedField();
  _impl_.embeddings_data_.Destroy();
}

void NodeEmbeddingResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeEmbeddingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protoembedding.NodeEmbeddingResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dimensions_.Clear();
  _impl_.missing_ids_.Clear();
  _impl_.embeddings_data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeEmbeddingResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes embeddings_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_embeddings_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 dimensions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 missing_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_missing_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_missing_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeEmbeddingResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protoembedding.NodeEmbeddingResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes embeddings_data = 1;
  if (!this->_internal_embeddings_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_embeddings_data(), target);
  }

  // repeated int32 dimensions = 2;
  {
    int byte_size = _impl_._dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_dimensions(), byte_size, target);
    }
  }

  // repeated uint32 missing_ids = 3;
  {
    int byte_size = _impl_._missing_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_missing_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoembedding.NodeEmbeddingResponse)
  return target;
}

size_t NodeEmbeddingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoembedding.NodeEmbeddingResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 dimensions = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 missing_ids = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.missing_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._missing_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes embeddings_data = 1;
  if (!this->_internal_embeddings_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_embeddings_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeEmbeddingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeEmbeddingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeEmbeddingResponse::GetClassData() const { return &_class_data_; }


void NodeEmbeddingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeEmbeddingResponse*>(&to_msg);
  auto& from = static_cast<const NodeEmbeddingResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protoembedding.NodeEmbeddingResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dimensions_.MergeFrom(from._impl_.dimensions_);
  _this->_impl_.missing_ids_.MergeFrom(from._impl_.missing_ids_);
  if (!from._internal_embeddings_data().empty()) {
    _this->_internal_set_embeddings_data(from._internal_embeddings_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeEmbeddingResponse::CopyFrom(const NodeEmbeddingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoembedding.NodeEmbeddingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeEmbeddingResponse::IsInitialized() const {
  return true;
}

void NodeEmbeddingResponse::InternalSwap(NodeEmbeddingResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dimensions_.InternalSwap(&other->_impl_.dimensions_);
  _impl_.missing_ids_.InternalSwap(&other->_impl_.missing_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.embeddings_data_, lhs_arena,
      &other->_impl_.embeddings_data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeEmbeddingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_embedding_2eproto_getter, &descriptor_table_embedding_2eproto_once,
      file_level_metadata_embedding_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protoembedding
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protoembedding::NodeEmbeddingRequest*
Arena::CreateMaybeMessage< ::protoembedding::NodeEmbeddingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoembedding::NodeEmbeddingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::protoembedding::NodeEmbeddingResponse*
Arena::CreateMaybeMessage< ::protoembedding::NodeEmbeddingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoembedding::NodeEmbeddingResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
